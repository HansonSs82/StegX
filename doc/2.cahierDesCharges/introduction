Histoire

[definition de la steganographie]

La stéganographie est une méthode très ancienne dont la première référence à cette utilisation date du premier siècle avant Jésus-Christ. 
Elle apparaît dans un récit écrit par Hérodote qui raconte comment deux citoyens communiquaient secrètement : 
le premier citoyen rasait la tête de son esclave et lui écrivait un message sur son crâne. Ensuite, il fallait attendre que les cheveux de l'esclave repousse puis aille chez le deuxième citoyen. 
Ce dernier devait de nouveau raser la tête de l'esclave pour découvrir le message qui lui était destiné. 
Une autre utilisation de la stéganographie consistait à utiliser de l'encre ,invisible à l'oeil nu, mais qui était révélée à la chaleur. 

Avec l'émergence de l'Informatique, les techniques de Stéganographie se sont renouvelées. En effet, il est désormais possible de cacher des données dans d'autres données. 
Cette multiplicité de techniques stéganographiques grâce à l'Informatique montre l'étendue de cette application dans tous les domaines. 
Par exemple, la stéganographie moderne a été utilisé dans des communications terroristes (transmission de messages) ou dans les signatures de fichiers multimedia (tatouage numérique) afin de protéger les droits d'auteurs. 

Questionnements : 
- Quels algorithmes seront utilisés pour quels formats de fichiers ? 
- Quelles sont les extensions de fichiers que l'utilisateur utilisera pour cacher ses données ? 
- Quelle interface est intéressante pour un utilisateur qui veut cacher des données dans un fichier ?
- Quelle interface faut-il utiliser pour découvrir un fichier caché dans un autre (stéganalyse) ?

EXTENSIONS A TRAVAILLER POUR TEXTE : odt
EXTENSIONS A TRAVAILLER POUR IMAGE : 
EXTENSIONS A TRAVAILLER POUR SON : 
EXTENSIONS A TRAVAILLER POUR VIDEO : 

Algorithme de stéganographie dans un texte

- ?

Algorithme de stéganographie dans une image

- Algorithme LSB : 
Chaque pixel d'une image correspond à un triplet de nombres : R,G,B qui correspondent aux composantes de couleurs Rouge-Vert-Bleu de 0 à 255
Le but de cet algorithme est donc de cacher des bits dans cette image. Pour se faire, nous allons remplacer les 2 bits de poids faibles de chaque composante des pixels de l'image. 
En effet, à l'oeil nu, l'homme ne discernera jamais le changement minime de composante. 
Nous allons faire un exemple : 
Prenons un exemple de couleur C1 dont le triplet est (219,27,91)
R : 219 = 11011011
G : 27 = 11011
B : 91 = 1011011

Imaginons que la donnée a cacher dans le fichier composé de cet unique pixel de couleur C1 correspond à la suite de bits B=000000 et
Ce qui donne une toute autre couleur C2 en changeant les 2 bits de poids faibles de chaque composantes du pixel : 
R : 216 = 11011011
G : 24 = 11000
B : 88 = 1011000

Voici ici les deux couleurs C1 et C2, montrant ainsi qu'un humain ne pourra jamais détecter un changement de bit. 
[2 images]

Pour la partie réception du fichier, il faut savoir si ce fichier a été utilisé pour un message caché et connaître combien de bits sont cachés. 
Il faudra donc calculer la taille maximale du message à cacher qui sera une puissance de 2. En effet, en fonction de la taille du fichier, un certain nombre de bits sera réservé pour connaître la taille 
des données à cacher. 



Motivation pour le projet
